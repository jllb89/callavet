/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Liveness probe */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Ok"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** API version & commit hash */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Ok"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/time": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Server time */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** Format: date-time */
                            now?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user profile + billing + active subscription snapshot */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Me"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update profile fields */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["MePatch"];
            responses: {
                200: components["responses"]["Me"];
            };
        };
        trace?: never;
    };
    "/me/security/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List recent auth sessions/devices */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["List"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/security/logout-all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Invalidate other sessions */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/billing-profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get billing profile */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["BillingProfile"];
            };
        };
        /** Upsert billing profile */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["BillingProfile"];
            responses: {
                200: components["responses"]["BillingProfile"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/billing/payment-method/attach": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start attach flow (Stripe SetupIntent) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["StripeSetup"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/billing/payment-method/{pmId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Detach payment method */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    pmId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List my pets */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ListPets"];
            };
        };
        put?: never;
        /** Create a pet */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["PetUpsert"];
            responses: {
                201: components["responses"]["Pet"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pets/{petId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a pet */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    petId: components["parameters"]["petId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Pet"];
            };
        };
        put?: never;
        post?: never;
        /** Archive a pet */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    petId: components["parameters"]["petId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /** Update a pet */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    petId: components["parameters"]["petId"];
                };
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["PetUpsert"];
            responses: {
                200: components["responses"]["Pet"];
            };
        };
        trace?: never;
    };
    "/pets/{petId}/files/signed-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create signed upload URL for pet assets */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    petId: components["parameters"]["petId"];
                };
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["SignedUrl"];
            responses: {
                200: components["responses"]["SignedUrl"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Public vet directory with filters */
        get: {
            parameters: {
                query?: {
                    country?: string;
                    specialties?: string;
                    languages?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ListVets"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vets/{vetId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Public vet profile */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    vetId: components["parameters"]["vetId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Vet"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/vet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get my vet profile */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Vet"];
            };
        };
        /** Upsert my vet profile */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["VetUpsert"];
            responses: {
                200: components["responses"]["Vet"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/vet/availability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List weekly slots */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["VetAvailability"];
            };
        };
        /** Replace weekly template */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["VetAvailability"];
            responses: {
                200: components["responses"]["VetAvailability"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/vet/availability/overrides": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add an availability override */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["VetOverride"];
            responses: {
                201: components["responses"]["VetOverride"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/vet/availability/overrides/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete an availability override */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/centers/near": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find nearby centers */
        get: {
            parameters: {
                query: {
                    lat: number;
                    lng: number;
                    radius?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ListCenters"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List active plans */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ListPlans"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/plans/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get plan by code */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    code: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Plan"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscriptions/my": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** My subscriptions */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ListSubscriptions"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscriptions/usage/current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Current-period usage snapshot */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Usage"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscriptions/checkout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start Stripe Checkout for a plan */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["Checkout"];
            responses: {
                200: components["responses"]["StripeCheckout"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscriptions/portal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Stripe Billing Portal session */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["StripePortal"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscriptions/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel at period end */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Subscription"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscriptions/resume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resume subscription */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Subscription"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscriptions/change-plan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Change plan (prorated) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["ChangePlan"];
            responses: {
                200: components["responses"]["Subscription"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entitlements/reserve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reserve a unit (chat|video) */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "Idempotency-Key"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["EntitlementReserve"];
            responses: {
                200: components["responses"]["EntitlementReserve"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entitlements/commit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Finalize a reservation */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "Idempotency-Key"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["EntitlementCommit"];
            responses: {
                200: components["responses"]["Ok"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/entitlements/release": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Roll back a pending reservation */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "Idempotency-Key"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["EntitlementRelease"];
            responses: {
                200: components["responses"]["Ok"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List my payments */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ListPayments"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payments/{paymentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Payment detail */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    paymentId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Payment"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payments/one-off/checkout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Checkout for one-off (overage) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["OneOffCheckout"];
            responses: {
                200: components["responses"]["StripeCheckout"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List my invoices */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ListInvoices"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoices/{invoiceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Invoice detail */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    invoiceId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Invoice"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sessions/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start session (chat or video) */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "Idempotency-Key"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["StartSession"];
            responses: {
                200: components["responses"]["SessionStart"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sessions/end": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** End session and commit entitlement */
        post: {
            parameters: {
                query?: never;
                header?: {
                    "Idempotency-Key"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["EndSession"];
            responses: {
                200: components["responses"]["Session"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List my sessions (user or vet) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ListSessions"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sessions/{sessionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get session detail */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    sessionId: components["parameters"]["sessionId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Session"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update status (no_show, etc.) */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    sessionId: components["parameters"]["sessionId"];
                };
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["SessionPatch"];
            responses: {
                200: components["responses"]["Session"];
            };
        };
        trace?: never;
    };
    "/sessions/{sessionId}/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List messages in a session */
        get: {
            parameters: {
                query?: {
                    limit?: components["parameters"]["pagingLimit"];
                    cursor?: components["parameters"]["pagingCursor"];
                };
                header?: never;
                path: {
                    sessionId: components["parameters"]["sessionId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ListMessages"];
            };
        };
        put?: never;
        /** Append message */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    sessionId: components["parameters"]["sessionId"];
                };
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["MessageCreate"];
            responses: {
                201: components["responses"]["Message"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sessions/{sessionId}/transcript": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Export transcript */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    sessionId: components["parameters"]["sessionId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Transcript"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/video/rooms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create room + grant token (internal) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["VideoRoomCreate"];
            responses: {
                200: components["responses"]["VideoRoom"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/video/rooms/{roomId}/end": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** End/lock a room */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    roomId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Ok"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sessions/{sessionId}/notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get vet notes for a session */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    sessionId: components["parameters"]["sessionId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Notes"];
            };
        };
        put?: never;
        /** Upsert vet notes (SOAP/summary) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    sessionId: components["parameters"]["sessionId"];
                };
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["NotesUpsert"];
            responses: {
                200: components["responses"]["Notes"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pets/{petId}/care-plans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List care plans */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    petId: components["parameters"]["petId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ListCarePlans"];
            };
        };
        put?: never;
        /** Create care plan */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    petId: components["parameters"]["petId"];
                };
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["CarePlanCreate"];
            responses: {
                201: components["responses"]["CarePlan"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/care-plans/{planId}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List care plan items */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    planId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ListCarePlanItems"];
            };
        };
        put?: never;
        /** Add care plan item */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    planId: string;
                };
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["CarePlanItemCreate"];
            responses: {
                201: components["responses"]["CarePlanItem"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/care-plans/items/{itemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update/fulfill care plan item */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    itemId: string;
                };
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["CarePlanItemPatch"];
            responses: {
                200: components["responses"]["CarePlanItem"];
            };
        };
        trace?: never;
    };
    "/pets/{petId}/image-cases": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List image cases (Phase 2) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    petId: components["parameters"]["petId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ListImageCases"];
            };
        };
        put?: never;
        /** Create image case */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    petId: components["parameters"]["petId"];
                };
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["ImageCaseCreate"];
            responses: {
                201: components["responses"]["ImageCase"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/image-cases/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get image case detail */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ImageCase"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/appointments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List my appointments (user or vet) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ListAppointments"];
            };
        };
        put?: never;
        /** Book an appointment */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["AppointmentCreate"];
            responses: {
                201: components["responses"]["Appointment"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/appointments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update appointment status */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["AppointmentPatch"];
            responses: {
                200: components["responses"]["Appointment"];
            };
        };
        trace?: never;
    };
    "/vets/{vetId}/availability/slots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Generated slots (template + overrides) */
        get: {
            parameters: {
                query: {
                    from: string;
                    to: string;
                };
                header?: never;
                path: {
                    vetId: components["parameters"]["vetId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ListSlots"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kb": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Browse KB */
        get: {
            parameters: {
                query?: {
                    species?: string;
                    tags?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ListKB"];
            };
        };
        put?: never;
        /** Create/update KB item */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["KBUpsert"];
            responses: {
                201: components["responses"]["KBItem"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kb/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get KB item */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["KBItem"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vector/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Vector-only nearest-neighbors search (no keywords)
         * @description Pure ANN using pgvector (cosine). Optional `filter_ids` to restrict index; otherwise full-table scan on the chosen collection’s IVFFLAT index.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        target: "kb" | "messages" | "notes" | "products" | "services" | "pets" | "vets";
                        /** @description Embedding floats (e.g., 1536-dim) */
                        query_embedding: number[];
                        /** @default 8 */
                        topK: number;
                        /** @description Optional whitelist of ids to limit search space */
                        filter_ids?: string[];
                    };
                };
            };
            responses: {
                /** @description Nearest neighbors */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results?: {
                                /** Format: uuid */
                                id?: string;
                                /** @description Cosine similarity */
                                score?: number;
                                snippet?: string;
                                metadata?: {
                                    [key: string]: unknown;
                                };
                            }[];
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vector/upsert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upsert vector entries (manage embeddings explicitly)
         * @description Provide your own embeddings. Server persists payload + embedding and updates IVFFLAT.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        target: "kb" | "messages" | "notes" | "products" | "services" | "pets" | "vets";
                        items: {
                            /** Format: uuid */
                            id: string;
                            embedding: number[];
                            payload?: {
                                [key: string]: unknown;
                            };
                        }[];
                    };
                };
            };
            responses: {
                200: components["responses"]["Ok"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sessions/{sessionId}/ratings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Rate a session */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    sessionId: components["parameters"]["sessionId"];
                };
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["RatingCreate"];
            responses: {
                201: components["responses"]["Rating"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vets/{vetId}/ratings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Public aggregate ratings */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    vetId: components["parameters"]["vetId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ListRatings"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notifications/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send test notification */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["NotifyTest"];
            responses: {
                200: components["responses"]["Ok"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/signed-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generic signed upload URL */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["SignedUrl"];
            responses: {
                200: components["responses"]["SignedUrl"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/download-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Signed download URL */
        get: {
            parameters: {
                query: {
                    path: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["SignedUrl"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search users */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ListUsers"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user detail */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["User"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/subscriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List subscriptions */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ListSubscriptions"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/credits/grant": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Grant comp credits/entitlements */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["GrantCredits"];
            responses: {
                200: components["responses"]["Ok"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/refunds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Stripe refund */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["Refund"];
            responses: {
                200: components["responses"]["Payment"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/vets/{vetId}/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Approve vet */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    vetId: components["parameters"]["vetId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Vet"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/plans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create/Update plan */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["PlanUpsert"];
            responses: {
                200: components["responses"]["Plan"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/coupons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create coupon (optional) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        code: string;
                        percent_off?: number;
                    };
                };
            };
            responses: {
                201: components["responses"]["Ok"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/analytics/usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Usage analytics */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Ok"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/stripe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Stripe webhook (raw, signed) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                200: components["responses"]["Ok"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/stripe/ingest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Normalize Stripe event into DB (internal) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["StripeIngest"];
            responses: {
                200: components["responses"]["Ok"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/embeddings/backfill": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Backfill embeddings per table */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        table: string;
                        limit?: number;
                    };
                };
            };
            responses: {
                202: components["responses"]["Ok"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/summaries/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate consultation summaries or care plan drafts */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** Format: uuid */
                        sessionId: string;
                        /** @enum {string} */
                        type: "notes" | "care_plan";
                    };
                };
            };
            responses: {
                202: components["responses"]["Ok"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Me: {
            user?: components["schemas"]["User"];
            billing_profile?: components["schemas"]["BillingProfile"];
            active_subscription?: components["schemas"]["Subscription"];
        };
        User: {
            /** Format: uuid */
            id?: string;
            /** Format: email */
            email?: string;
            full_name?: string;
            phone?: string;
            /** @enum {string} */
            role?: "user" | "vet" | "admin";
        };
        BillingProfile: {
            stripe_customer_id?: string;
            default_payment_method?: string;
            billing_address?: {
                [key: string]: unknown;
            };
            tax_id?: string;
            /** @enum {string} */
            preferred_language?: "es" | "en";
            timezone?: string;
        };
        PetInput: {
            name: string;
            species: string;
            breed?: string;
            /** Format: date */
            birthdate?: string;
            sex?: string;
            weight_kg?: number;
            medical_notes?: string;
        };
        Pet: components["schemas"]["PetInput"] & {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            user_id?: string;
        };
        VetInput: {
            license_number?: string;
            country?: string;
            bio?: string;
            years_experience?: number;
            specialties?: string[];
            languages?: string[];
        };
        Vet: components["schemas"]["VetInput"] & {
            /** Format: uuid */
            id?: string;
            is_approved?: boolean;
        };
        Center: {
            /** Format: uuid */
            id?: string;
            name?: string;
            address?: string;
            phone?: string;
            /** Format: uri */
            website?: string;
            is_partner?: boolean;
        };
        PlanInput: {
            code?: string;
            name?: string;
            description?: string;
            price_cents?: number;
            /** @default MXN */
            currency: string;
            /** @enum {string} */
            billing_period?: "month" | "year";
            included_chats?: number;
            /** @description COUNT of video sessions per period */
            included_videos?: number;
            pets_included_default?: number;
            tax_rate?: number;
            is_active?: boolean;
        };
        Plan: components["schemas"]["PlanInput"] & {
            /** Format: uuid */
            id?: string;
        };
        Subscription: {
            /** Format: uuid */
            id?: string;
            plan?: components["schemas"]["Plan"];
            /** @enum {string} */
            status?: "trialing" | "active" | "past_due" | "canceled" | "expired";
            /** Format: date-time */
            current_period_start?: string;
            /** Format: date-time */
            current_period_end?: string;
            cancel_at_period_end?: boolean;
            pets_included?: number | null;
        };
        Usage: {
            included_chats?: number;
            consumed_chats?: number;
            included_videos?: number;
            consumed_videos?: number;
            /** Format: date-time */
            period_start?: string;
            /** Format: date-time */
            period_end?: string;
        };
        Payment: {
            /** Format: uuid */
            id?: string;
            amount_cents?: number;
            currency?: string;
            status?: string;
        };
        Invoice: {
            /** Format: uuid */
            id?: string;
            amount_cents?: number;
            currency?: string;
            status?: string;
            /** Format: date-time */
            issued_at?: string;
        };
        SessionStart: {
            session?: components["schemas"]["Session"];
            video?: {
                roomId?: string;
                token?: string;
            } | null;
        };
        Session: {
            /** Format: uuid */
            id?: string;
            /** @enum {string} */
            mode?: "chat" | "video";
            /** Format: uuid */
            user_id?: string;
            /** Format: uuid */
            vet_id?: string | null;
            /** Format: uuid */
            pet_id?: string;
            status?: string;
            /** Format: date-time */
            started_at?: string | null;
            /** Format: date-time */
            ended_at?: string | null;
        };
        Message: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            session_id?: string;
            /** Format: uuid */
            sender_id?: string;
            /** @enum {string} */
            role?: "user" | "vet" | "ai";
            content?: string;
            /** Format: date-time */
            created_at?: string;
        };
        Notes: {
            /** Format: uuid */
            session_id?: string;
            /** Format: uuid */
            vet_id?: string;
            summary_text?: string;
            plan_summary?: string;
        };
        CarePlan: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            pet_id?: string;
            created_by_ai?: boolean;
            short_term?: string;
            mid_term?: string;
            long_term?: string;
        };
        CarePlanItem: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            care_plan_id?: string;
            /** @enum {string} */
            type?: "consult" | "vaccine" | "product";
            description?: string;
            price_cents?: number;
            fulfilled?: boolean;
        };
        ImageCase: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            pet_id?: string;
            /** Format: uri */
            image_url?: string;
            labels?: string[];
            findings?: string;
            diagnosis_label?: string;
        };
        Appointment: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            session_id?: string | null;
            /** Format: uuid */
            vet_id?: string;
            /** Format: uuid */
            user_id?: string;
            /** Format: date-time */
            starts_at?: string;
            /** Format: date-time */
            ends_at?: string | null;
            status?: string;
        };
        Slot: {
            /** Format: date-time */
            start?: string;
            /** Format: date-time */
            end?: string;
            available?: boolean;
        };
        KBItem: {
            /** Format: uuid */
            id?: string;
            title?: string;
            body?: string;
            species?: string[];
            tags?: string[];
        };
        Rating: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            session_id?: string;
            /** Format: uuid */
            vet_id?: string;
            /** Format: uuid */
            user_id?: string;
            score?: number;
            comment?: string;
        };
        VetAvailability: {
            template?: {
                weekday?: number;
                start_time?: string;
                end_time?: string;
            }[];
            overrides?: components["schemas"]["VetOverride"][];
        };
        VetOverride: {
            /** Format: uuid */
            id?: string;
            /** Format: date */
            date?: string;
            /** Format: date-time */
            start?: string;
            /** Format: date-time */
            end?: string;
            closed?: boolean;
        };
    };
    responses: {
        /** @description OK */
        Ok: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @default true */
                    ok: boolean;
                };
            };
        };
        /** @description List response */
        List: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    data?: Record<string, never>[];
                    nextCursor?: string | null;
                };
            };
        };
        /** @description Current user snapshot */
        Me: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Me"];
            };
        };
        /** @description Billing profile */
        BillingProfile: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["BillingProfile"];
            };
        };
        /** @description Stripe SetupIntent (client_secret) */
        StripeSetup: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    client_secret?: string;
                };
            };
        };
        /** @description Pets */
        ListPets: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    data?: components["schemas"]["Pet"][];
                };
            };
        };
        /** @description Pet */
        Pet: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Pet"];
            };
        };
        /** @description Vets */
        ListVets: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    data?: components["schemas"]["Vet"][];
                };
            };
        };
        /** @description Vet */
        Vet: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Vet"];
            };
        };
        /** @description Centers */
        ListCenters: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    data?: components["schemas"]["Center"][];
                };
            };
        };
        /** @description Plans */
        ListPlans: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    data?: components["schemas"]["Plan"][];
                };
            };
        };
        /** @description Plan */
        Plan: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Plan"];
            };
        };
        /** @description Subscriptions */
        ListSubscriptions: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    data?: components["schemas"]["Subscription"][];
                };
            };
        };
        /** @description Subscription */
        Subscription: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Subscription"];
            };
        };
        /** @description Usage snapshot */
        Usage: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Usage"];
            };
        };
        /** @description Stripe Checkout URL */
        StripeCheckout: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** Format: uri */
                    url?: string;
                };
            };
        };
        /** @description Stripe Billing Portal URL */
        StripePortal: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** Format: uri */
                    url?: string;
                };
            };
        };
        /** @description Payments */
        ListPayments: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    data?: components["schemas"]["Payment"][];
                };
            };
        };
        /** @description Payment */
        Payment: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Payment"];
            };
        };
        /** @description Invoices */
        ListInvoices: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    data?: components["schemas"]["Invoice"][];
                };
            };
        };
        /** @description Invoice */
        Invoice: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Invoice"];
            };
        };
        /** @description Session started */
        SessionStart: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["SessionStart"];
            };
        };
        /** @description Session */
        Session: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Session"];
            };
        };
        /** @description Sessions */
        ListSessions: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    data?: components["schemas"]["Session"][];
                };
            };
        };
        /** @description Vet availability template and overrides */
        VetAvailability: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["VetAvailability"];
            };
        };
        /** @description Vet availability override */
        VetOverride: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["VetOverride"];
            };
        };
        /** @description Reservation created */
        EntitlementReserve: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        /** @description Messages */
        ListMessages: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    data?: components["schemas"]["Message"][];
                };
            };
        };
        /** @description Message */
        Message: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Message"];
            };
        };
        /** @description Transcript */
        Transcript: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    text?: string;
                };
            };
        };
        /** @description LiveKit room + token */
        VideoRoom: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    roomId?: string;
                    token?: string;
                };
            };
        };
        /** @description Vet notes */
        Notes: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Notes"];
            };
        };
        /** @description Care plans */
        ListCarePlans: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    data?: components["schemas"]["CarePlan"][];
                };
            };
        };
        /** @description Care plan */
        CarePlan: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["CarePlan"];
            };
        };
        /** @description Care plan items */
        ListCarePlanItems: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    data?: components["schemas"]["CarePlanItem"][];
                };
            };
        };
        /** @description Care plan item */
        CarePlanItem: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["CarePlanItem"];
            };
        };
        /** @description Image cases */
        ListImageCases: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    data?: components["schemas"]["ImageCase"][];
                };
            };
        };
        /** @description Image case */
        ImageCase: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ImageCase"];
            };
        };
        /** @description Appointments */
        ListAppointments: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    data?: components["schemas"]["Appointment"][];
                };
            };
        };
        /** @description Appointment */
        Appointment: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Appointment"];
            };
        };
        /** @description Time slots */
        ListSlots: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    data?: components["schemas"]["Slot"][];
                };
            };
        };
        /** @description KB items */
        ListKB: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    data?: components["schemas"]["KBItem"][];
                };
            };
        };
        /** @description KB item */
        KBItem: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["KBItem"];
            };
        };
        /** @description Rating */
        Rating: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Rating"];
            };
        };
        /** @description Ratings */
        ListRatings: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    data?: components["schemas"]["Rating"][];
                };
            };
        };
        /** @description Signed URL response */
        SignedUrl: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** Format: uri */
                    url?: string;
                    method?: string;
                    headers?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        /** @description Users */
        ListUsers: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    data?: components["schemas"]["User"][];
                };
            };
        };
        /** @description User */
        User: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["User"];
            };
        };
    };
    parameters: {
        petId: string;
        vetId: string;
        sessionId: string;
        pagingLimit: number;
        pagingCursor: string;
    };
    requestBodies: {
        MePatch: {
            content: {
                "application/json": {
                    full_name?: string;
                    phone?: string;
                    /** @enum {string} */
                    language?: "es" | "en";
                    timezone?: string;
                };
            };
        };
        BillingProfile: {
            content: {
                "application/json": components["schemas"]["BillingProfile"];
            };
        };
        PetUpsert: {
            content: {
                "application/json": components["schemas"]["PetInput"];
            };
        };
        SignedUrl: {
            content: {
                "application/json": {
                    path: string;
                    contentType: string;
                };
            };
        };
        VetUpsert: {
            content: {
                "application/json": components["schemas"]["VetInput"];
            };
        };
        VetAvailability: {
            content: {
                "application/json": components["schemas"]["VetAvailability"];
            };
        };
        VetOverride: {
            content: {
                "application/json": components["schemas"]["VetOverride"];
            };
        };
        Checkout: {
            content: {
                "application/json": {
                    plan_code: string;
                    /** @description pets/patients seats */
                    seats?: number;
                    /** Format: uri */
                    success_url: string;
                    /** Format: uri */
                    cancel_url: string;
                };
            };
        };
        ChangePlan: {
            content: {
                "application/json": {
                    plan_code: string;
                    seats?: number;
                };
            };
        };
        EntitlementReserve: {
            content: {
                "application/json": {
                    /** @enum {string} */
                    type: "chat" | "video";
                    /** Format: uuid */
                    sessionId?: string;
                };
            };
        };
        EntitlementCommit: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    consumptionId: string;
                };
            };
        };
        EntitlementRelease: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    consumptionId: string;
                };
            };
        };
        OneOffCheckout: {
            content: {
                "application/json": {
                    reason?: string;
                    amount_cents: number;
                    /** Format: uri */
                    success_url: string;
                    /** Format: uri */
                    cancel_url: string;
                };
            };
        };
        StartSession: {
            content: {
                "application/json": {
                    /** @enum {string} */
                    mode: "chat" | "video";
                    /** Format: uuid */
                    pet_id: string;
                    text?: string;
                };
            };
        };
        EndSession: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    sessionId: string;
                };
            };
        };
        SessionPatch: {
            content: {
                "application/json": {
                    /** @enum {string} */
                    status?: "scheduled" | "active" | "completed" | "no_show" | "canceled";
                };
            };
        };
        MessageCreate: {
            content: {
                "application/json": {
                    /** @enum {string} */
                    role: "user" | "vet" | "ai";
                    content: string;
                };
            };
        };
        VideoRoomCreate: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    sessionId: string;
                };
            };
        };
        NotesUpsert: {
            content: {
                "application/json": {
                    summary_text?: string;
                    plan_summary?: string;
                };
            };
        };
        CarePlanCreate: {
            content: {
                "application/json": {
                    /** @default true */
                    created_by_ai?: boolean;
                    short_term?: string;
                    mid_term?: string;
                    long_term?: string;
                };
            };
        };
        CarePlanItemCreate: {
            content: {
                "application/json": {
                    /** @enum {string} */
                    type: "consult" | "vaccine" | "product";
                    description: string;
                    price_cents?: number;
                };
            };
        };
        CarePlanItemPatch: {
            content: {
                "application/json": {
                    fulfilled?: boolean;
                    description?: string;
                    price_cents?: number;
                };
            };
        };
        ImageCaseCreate: {
            content: {
                "application/json": {
                    /** Format: uri */
                    image_url: string;
                    labels?: string[];
                    findings?: string;
                    diagnosis_label?: string;
                };
            };
        };
        AppointmentCreate: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    vet_id: string;
                    /** Format: uuid */
                    pet_id: string;
                    /** Format: date-time */
                    starts_at: string;
                };
            };
        };
        AppointmentPatch: {
            content: {
                "application/json": {
                    /** @enum {string} */
                    status?: "scheduled" | "active" | "completed" | "no_show" | "canceled";
                };
            };
        };
        KBUpsert: {
            content: {
                "application/json": {
                    title: string;
                    body: string;
                    species?: string[];
                    tags?: string[];
                };
            };
        };
        RatingCreate: {
            content: {
                "application/json": {
                    score: number;
                    comment?: string;
                };
            };
        };
        NotifyTest: {
            content: {
                "application/json": {
                    /** @enum {string} */
                    channel: "email" | "sms" | "whatsapp";
                    to: string;
                    message: string;
                };
            };
        };
        StripeIngest: {
            content: {
                "application/json": {
                    type?: string;
                    data?: Record<string, never>;
                };
            };
        };
        PlanUpsert: {
            content: {
                "application/json": components["schemas"]["PlanInput"];
            };
        };
        GrantCredits: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    user_id: string;
                    credits: number;
                    /** @enum {string} */
                    type?: "chat" | "video";
                    note?: string;
                };
            };
        };
        Refund: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    payment_id: string;
                    reason?: string;
                    amount_cents?: number;
                };
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
